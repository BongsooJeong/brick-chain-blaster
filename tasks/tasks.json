{
  "tasks": [
    {
      "id": 1,
      "title": "Setup Node.js and NPM Environment",
      "description": "Initialize the development environment with Node.js and NPM for the Brick Chain Blaster game following MVP approach",
      "status": "done",
      "dependencies": [],
      "priority": "high",
      "details": "1. Install latest LTS version of Node.js\n2. Create project directory structure (src, assets, public folders)\n3. Initialize NPM project with `npm init`\n4. Configure package.json with necessary scripts and dependencies\n5. Configure .gitignore for Node.js projects\n6. Setup ESLint and Prettier for code quality\n7. Create README.md with project overview\n8. Initialize Git repository\n9. Document all setup steps for team reference",
      "testStrategy": "1. Verify Node and NPM versions are compatible with Phaser 3 requirements (using node -v, npm -v)\n2. Ensure package.json is correctly configured with all required dependencies and scripts\n3. Verify npm install runs without errors\n4. Confirm node_modules folder is created properly\n5. Ensure the project structure follows best practices and includes all necessary directories",
      "subtasks": [
        {
          "id": "1.1",
          "title": "Install Node.js and initialize project",
          "description": "Install Node.js LTS and create basic project structure",
          "status": "done"
        },
        {
          "id": "1.2",
          "title": "Configure package.json",
          "description": "Set up package.json with all necessary scripts and dependencies for the game",
          "status": "done"
        },
        {
          "id": "1.3",
          "title": "Create project directory structure",
          "description": "Set up src, assets, and public folders according to best practices",
          "status": "done"
        },
        {
          "id": "1.4",
          "title": "Set up development tools",
          "description": "Configure Git, .gitignore, ESLint, and Prettier",
          "status": "done"
        },
        {
          "id": "1.5",
          "title": "Document setup process",
          "description": "Create comprehensive documentation of the setup process in README.md",
          "status": "done"
        }
      ]
    },
    {
      "id": 2,
      "title": "Setup Phaser 3 with TypeScript",
      "description": "Install and configure Phaser 3 game framework with TypeScript support using create-phaser template as part of the MVP approach",
      "status": "done",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "1. Install Phaser 3 using `npm install phaser`\n2. Setup TypeScript with `npm install typescript ts-loader`\n3. Configure tsconfig.json for Phaser compatibility and optimize TypeScript settings\n4. Create webpack configuration for development and production\n5. Setup development server with hot-reload\n6. Create basic game structure following Phaser 3 scene architecture\n7. Implement simple loading screen to verify setup\n8. Create skeleton structure for game scenes and objects\n9. Configure build scripts for production deployment",
      "testStrategy": "1. Verify development server runs without errors using `npm start`\n2. Confirm basic Phaser scene renders correctly in browser\n3. Test TypeScript compilation works correctly with Phaser types\n4. Verify hot-reload functionality during development\n5. Run `tsc` command to ensure TypeScript compilation completes without errors\n6. Test production build using `npm build` command",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Configure CI/CD with GitHub Actions and Vercel",
      "description": "Set up continuous integration and deployment pipeline using GitHub Actions with automatic preview deployments to Vercel",
      "status": "done",
      "dependencies": [
        2
      ],
      "priority": "high",
      "details": "1. Create GitHub repository for the project\n2. Setup Vercel account and connect to GitHub repository\n3. Configure Vercel for static site hosting\n4. Create GitHub Actions workflow file (.github/workflows/ci.yml)\n5. Configure workflow to run tests, lint code, and build project\n6. Setup automatic deployment to Vercel preview environments for pull requests\n7. Configure production deployment on main branch merges",
      "testStrategy": "1. Verify automatic tests run when creating a Pull Request in GitHub repository\n2. Confirm Vercel preview URL is automatically generated after successful tests\n3. Verify production deployment automatically runs when merging to main branch\n4. Test deployed application functionality across different browsers\n5. Create a test pull request to verify the entire CI pipeline runs correctly",
      "subtasks": [
        {
          "id": 3.1,
          "title": "Create GitHub repository and setup Vercel connection",
          "description": "Create project repository on GitHub and connect it to a new Vercel project",
          "status": "done"
        },
        {
          "id": 3.2,
          "title": "Configure Vercel project settings",
          "description": "Set up Vercel for static site hosting with appropriate build settings",
          "status": "done"
        },
        {
          "id": 3.3,
          "title": "Create GitHub Actions workflow file",
          "description": "Create .github/workflows/ci.yml to define the CI/CD pipeline",
          "status": "done"
        },
        {
          "id": 3.4,
          "title": "Configure automated testing in CI pipeline",
          "description": "Set up GitHub Actions to automatically run tests on pull requests",
          "status": "done"
        },
        {
          "id": 3.5,
          "title": "Set up preview deployments for pull requests",
          "description": "Configure Vercel to create preview deployments for each pull request",
          "status": "done"
        },
        {
          "id": 3.6,
          "title": "Configure production deployment for main branch",
          "description": "Set up automatic deployment to production when changes are merged to main branch",
          "status": "done"
        },
        {
          "id": 3.7,
          "title": "Test complete CI/CD pipeline",
          "description": "Create test PR to verify entire workflow from PR creation to preview deployment to production deployment",
          "status": "done"
        },
        {
          "id": 3.8,
          "title": "Verify cross-browser compatibility",
          "description": "Test deployed application in multiple browsers to ensure proper functionality",
          "status": "done"
        }
      ]
    },
    {
      "id": 4,
      "title": "Implement Game Field and Physics",
      "description": "Create the basic game field with boundaries and implement Arcade Physics for ball movement as the first implementation task for Phase 1 (Basic Breakout Game MVP)",
      "status": "in-progress",
      "dependencies": [
        2
      ],
      "priority": "high",
      "details": "1. Create a new game scene with proper dimensions for desktop\n2. Setup Arcade Physics in the scene\n3. Implement game boundaries with collision detection\n4. Create world bounds that reflect the ball\n5. Implement physics properties for the ball's movement and collisions\n6. Add debug visualization for physics bodies and collision points during development\n7. Ensure consistent physics behavior across different frame rates\n8. Set up the basic screen layout and background for the game\n9. Add FPS counter and performance metrics for debugging\n10. Ensure the game field scales appropriately across different resolutions",
      "testStrategy": "1. Verify ball correctly bounces off screen boundaries\n2. Confirm physics system operates reliably at consistent FPS\n3. Test game field scaling across various resolutions\n4. Verify all collision events are properly detected\n5. Test ball collision with boundaries\n6. Verify physics properties like bounce and velocity behave as expected\n7. Test at different frame rates to ensure consistent behavior",
      "subtasks": [
        {
          "id": 1,
          "title": "게임 필드 크기 및 아케이드 물리 시스템 설정",
          "description": "고정된 게임 필드를 생성하고 Phaser의 아케이드 물리 시스템을 설정합니다.",
          "details": "1. 게임 필드의 너비와 높이를 설정 (800x600)\n2. 아케이드 물리 시스템 초기화\n3. 물리 세계 경계 설정\n4. 기본 물리 속성 구성 (중력, 충돌 등)\n5. 디버그 모드 설정 (개발 중 충돌 확인용)\n<info added on 2025-05-16T23:08:52.681Z>\n1. 게임 필드의 너비와 높이를 설정 (800x600)\\n2. 아케이드 물리 시스템 초기화\\n3. 물리 세계 경계 설정\\n4. 기본 물리 속성 구성 (중력, 충돌 등)\\n5. 디버그 모드 설정 (개발 중 충돌 확인용)\\n\\n현재 구현 상태:\\n- index.ts에서 게임 필드 크기 800x600 설정 완료\\n- index.ts에서 아케이드 물리 시스템 초기화 완료\\n- GameScene.ts에서 공과 패들에 setCollideWorldBounds(true) 설정 완료\\n- index.ts에서 기본 물리 속성(중력, 디버그 모드) 설정 완료\\n- 왼쪽/오른쪽 벽이 createBricks 함수에서 시각적으로 구현됨\\n\\n남은 작업:\\n1. 상단 벽 충돌 경계 추가 및 시각화 구현\\n2. 모든 경계(상하좌우)가 올바르게 설정되었는지 검증\\n3. 디버그 모드를 게임 내에서 토글할 수 있는 기능 구현 (키 입력 또는 UI 버튼)\\n4. 물리 디버깅을 위한 헬퍼 요소 추가 (충돌 경계 표시, 속도 벡터 시각화 등)\n</info added on 2025-05-16T23:08:52.681Z>\n<info added on 2025-05-16T23:10:32.596Z>\n1. 게임 필드의 너비와 높이를 설정 (800x600)\n2. 아케이드 물리 시스템 초기화\n3. 물리 세계 경계 설정\n4. 기본 물리 속성 구성 (중력, 충돌 등)\n5. 디버그 모드 설정 (개발 중 충돌 확인용)\n\n구현 완료 사항:\n- GameScene.ts에 상단 벽 경계 및 시각화 요소 추가 완료\n- 세 개의 벽 요소(상단, 좌측, 우측)를 정적 물리 바디 그룹으로 구현하여 공과의 충돌 처리 구현\n- 디버그 모드 토글 기능 추가 (D 키를 눌러 활성화/비활성화)\n- 디버그 정보 표시를 위한 UI 요소 추가:\n  * FPS 카운터\n  * 공의 속도 및 위치 정보 표시\n  * 디버그 모드 활성화 안내 텍스트\n- 물리 디버그 그래픽 토글 기능 추가\n\n최종 결과:\n- 게임 필드 크기 800x600 정확히 설정됨\n- 물리 세계 경계가 시각적으로 표시됨\n- 공 및 패들이 모든 경계(상하좌우)와 정확하게 충돌함\n- 디버그 모드를 통해 게임 개발 중 물리 시스템의 동작을 쉽게 검증 가능\n</info added on 2025-05-16T23:10:32.596Z>",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 4
        },
        {
          "id": 2,
          "title": "게임 경계 및 벽 충돌 구현",
          "description": "게임 영역의 경계와 벽에 대한 충돌 처리를 구현합니다.",
          "details": "1. 화면 경계를 시각적으로 표시 (테두리 또는 실제 벽 요소로)\n2. 상단, 좌측, 우측 벽 생성 및 물리 속성 설정\n3. 벽과 공의 충돌 로직 구현\n4. 플레이어가 놓친 공의 하단 경계 통과 감지\n5. 벽 충돌 시 사운드 효과 추가\n6. 다양한 충돌 각도에서 올바른 반사 확인\n<info added on 2025-05-16T23:11:03.803Z>\n1. 화면 경계를 시각적으로 표시 (테두리 또는 실제 벽 요소로)\\n2. 상단, 좌측, 우측 벽 생성 및 물리 속성 설정\\n3. 벽과 공의 충돌 로직 구현\\n4. 플레이어가 놓친 공의 하단 경계 통과 감지\\n5. 벽 충돌 시 사운드 효과 추가\\n6. 다양한 충돌 각도에서 올바른 반사 확인\\n\\n현재 구현 상황:\\n- 화면 경계 시각적 표시 완료 (상단, 좌측, 우측 벽 요소)\\n- 상단, 좌측, 우측 벽 생성 및 물리 속성 설정 완료\\n- 벽과 공의 기본 충돌 로직 구현 완료 (물리 충돌)\\n- 기본적인 벽 충돌 사운드 효과 추가 완료 (간단한 bounce 사운드)\\n\\n남은 작업:\\n1. 하단 경계 통과 감지 개선\\n   - 현재 기본 구현을 넘어 더 정확한 감지 로직 구현\\n   - 하단 경계 통과 시 게임 상태 변경 로직 연결\\n   - 디버깅 모드에서 하단 경계 통과 시각화 추가\\n\\n2. 충돌 각도 반사 검증 및 개선\\n   - 다양한 각도에서의 충돌 테스트 케이스 작성\\n   - 비정상적인 반사각 발생 시 보정 로직 추가\\n   - 속도에 따른 반사 정확도 검증\\n\\n3. 향상된 사운드 효과 시스템\\n   - 충돌 위치에 따라 다른 사운드 재생 (상단, 좌측, 우측 벽 구분)\\n   - 충돌 강도에 따른 사운드 볼륨/피치 조절\\n   - 사운드 풀링 시스템 구현으로 성능 최적화\n</info added on 2025-05-16T23:11:03.803Z>\n<info added on 2025-05-16T23:17:13.973Z>\n1. 화면 경계를 시각적으로 표시 (테두리 또는 실제 벽 요소로)\n2. 상단, 좌측, 우측 벽 생성 및 물리 속성 설정\n3. 벽과 공의 충돌 로직 구현\n4. 플레이어가 놓친 공의 하단 경계 통과 감지\n5. 벽 충돌 시 사운드 효과 추가\n6. 다양한 충돌 각도에서 올바른 반사 확인\n\n구현 완료 사항:\n1. 화면 경계를 시각적으로 표시하는 벽 요소(상단, 좌측, 우측) 구현 완료\n2. 각 벽에 개별적인 물리 충돌 속성 설정 완료\n   - 객체 생성 후 충돌 설정하는 순서로 런타임 오류 해결\n   - 각 벽에 올바른 물리 속성 적용\n3. 벽과 공의 충돌 처리 개선 완료\n   - 각 벽마다 다른 사운드 효과 적용 (상단 벽은 음조 변경)\n   - 디버그 모드에서 충돌 정보 시각화 구현\n4. 하단 경계 통과 감지 개선 완료\n   - 새로운 'fall' 사운드 효과 추가\n   - 화면에 빨간색 플래시 효과 표시\n   - 사운드 미존재 시 대체 사운드 설정 구현\n5. 다양한 충돌 각도에서 공이 예상대로 반사되도록 물리 시스템 조정 완료\n\n모든 작업이 완료되어 게임 필드의 경계가 명확히 시각화되고, 공과 벽 사이의 충돌이 올바르게 처리됩니다. 다양한 충돌 각도에서 공이 예상대로 반사되며, 하단 경계 통과 시 시각/청각적 피드백이 제공됩니다.\n</info added on 2025-05-16T23:17:13.973Z>",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 4
        },
        {
          "id": 3,
          "title": "공 물리 속성 및 움직임 구현",
          "description": "공의 물리적 속성과 움직임 로직을 구현합니다.",
          "details": "1. 공 스프라이트 생성 및 물리 속성 설정\n2. 공의 속도, 가속도, 반발력 설정\n3. 공의 최대/최소 속도 제한 설정\n4. 공의 중력 영향 제거 (수평 게임 플레이를 위함)\n5. 일관된 속도 계산을 위한 프레임 레이트 독립적 이동 구현\n6. 물리 연산 최적화 설정\n<info added on 2025-05-16T23:18:06.509Z>\n1. 공 스프라이트 생성 및 물리 속성 설정\n2. 공의 속도, 가속도, 반발력 설정\n3. 공의 최대/최소 속도 제한 설정\n4. 공의 중력 영향 제거 (수평 게임 플레이를 위함)\n5. 일관된 속도 계산을 위한 프레임 레이트 독립적 이동 구현\n6. 물리 연산 최적화 설정\n\nGameScene.ts 파일 분석 결과에 따른 개선 계획:\n\n1. 물리 상수 정의 및 구현:\n   - BALL_INITIAL_VELOCITY: 공의 초기 속도 벡터 설정\n   - BALL_MAX_VELOCITY: 공의 최대 속도 제한값 설정\n   - BALL_MIN_VELOCITY: 공의 최소 속도 제한값 설정\n   - BALL_ACCELERATION: 시간에 따른 공의 가속도 설정\n   - BALL_RESTITUTION: 벽과 충돌 시 반발력 계수 설정\n\n2. 속도 제한 로직 구현:\n   - Phaser의 setMaxVelocity() 메서드 활용\n   - 속도가 최소값 이하로 떨어질 경우 보정하는 로직 추가\n   - 각 축별(X, Y) 속도 제한 로직 분리 구현\n\n3. 프레임 레이트 독립적 움직임:\n   - delta 시간을 활용한 속도 계산 로직 구현\n   - update() 메서드 내에서 deltaTime을 고려한 이동 처리\n   - 일관된 물리 시뮬레이션을 위한 fixedUpdate 패턴 적용\n\n4. 물리 연산 최적화:\n   - 불필요한 물리 계산 최소화\n   - 공이 정지 상태일 때 물리 연산 일시 중지\n   - 화면 밖 객체에 대한 물리 연산 최적화\n   - 충돌 감지 최적화를 위한 그룹화 적용\n</info added on 2025-05-16T23:18:06.509Z>",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 4
        },
        {
          "id": 4,
          "title": "물리 디버그 및 성능 모니터링 추가",
          "description": "게임의 물리 요소를 디버깅하고 성능을 모니터링하는 도구를 추가합니다.",
          "details": "1. 물리 바디 시각화 기능 추가 (디버그 모드)\n2. 충돌 지점 및 반사 각도 시각적 표시\n3. FPS 카운터 및 성능 메트릭 추가\n4. 물리 연산 최적화 설정 (스텝 레이트 등)\n5. 다양한 해상도 및 디바이스에서 성능 테스트\n6. 프레임 레이트 일관성 확인을 위한 디버그 도구",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 4
        },
        {
          "id": 5,
          "title": "게임 배경 및 시각적 요소 구현",
          "description": "게임 배경 및 시각적 요소를 구현하여 게임 필드를 완성합니다.",
          "details": "1. 게임 배경 디자인 및 구현\n2. 격자 또는 가이드 라인 추가 (선택 사항)\n3. 경계선과 벽의 시각적 디자인\n4. 게임 영역 내부와 외부의 시각적 구분\n5. 다양한 해상도에서 일관된 시각적 표현\n6. UI 요소 배치를 위한 영역 확보",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 4
        }
      ]
    },
    {
      "id": 5,
      "title": "Implement Paddle and Ball Control",
      "description": "Create the player-controlled paddle and implement mouse-based aiming and ball launching mechanics for Phase 1 MVP",
      "status": "pending",
      "dependencies": [
        4
      ],
      "priority": "high",
      "details": "1. Create paddle sprite at bottom of screen\n2. Implement mouse control for paddle movement\n3. Implement mouse-over aim line visualization\n4. Calculate angle between paddle and mouse position\n5. Implement click-to-launch single ball mechanics (multiple balls will be in Phase 2)\n6. Add physics body to ball with proper collision properties\n7. Implement ball-paddle collision logic with appropriate reflection angles\n8. Add visual feedback for aiming direction\n9. Implement logic for when the ball is missed (falls below screen)",
      "testStrategy": "1. Verify paddle moves smoothly with mouse movement\n2. Test aim line follows mouse cursor accurately and displays correct angle\n3. Verify ball launches in the correct direction based on aim line\n4. Test ball-paddle collision behavior and reflection physics\n5. Ensure mouse controls are responsive and intuitive\n6. Verify appropriate events/handling occur when ball is missed\n7. Test overall gameplay flow from aiming to launching to ball interaction",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "Implement Basic Block System",
      "description": "Create the block/brick system with HP and collision detection",
      "status": "pending",
      "dependencies": [
        4
      ],
      "priority": "high",
      "details": "1. Create Block class with HP property\n2. Implement visual representation of blocks with different HP levels\n3. Setup collision detection between balls and blocks\n4. Implement HP reduction on collision with visual feedback\n5. Add block destruction animation and sound effects when HP reaches zero\n6. Create basic block layout system for testing (advanced patterns will be implemented in later tasks)\n7. Implement basic score counting logic when blocks are destroyed",
      "testStrategy": "1. Verify blocks render correctly on screen\n2. Test block collision and HP reduction when hit by ball\n3. Verify visual state changes as HP decreases\n4. Confirm blocks are destroyed correctly when HP reaches zero\n5. Test destruction effects (animation, sound) play appropriately\n6. Verify ball bounces physically correct after block collision\n7. Test performance stability with multiple blocks on screen\n8. Verify score increases correctly when blocks are destroyed",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Implement HUD and Score System",
      "description": "Create the heads-up display showing score, wave number, and remaining balls for the MVP version of the block-breaking game",
      "status": "pending",
      "dependencies": [
        5,
        6
      ],
      "priority": "medium",
      "details": "1. Design HUD layout with score, wave counter, and ball count\n2. Implement score calculation based on block destruction\n3. Create wave/level counter and progression logic\n4. Display remaining ball count (MVP supports single ball only)\n5. Design visually clear and intuitive UI elements\n6. Ensure UI elements are positioned to not interfere with gameplay\n7. Implement real-time score updates as blocks are destroyed\n8. Create visual indicators for wave/level progression",
      "testStrategy": "1. Verify score updates accurately in real-time during gameplay\n2. Confirm wave/level display changes correctly as game progresses\n3. Test ball count display updates correctly\n4. Verify HUD visibility and readability across different resolutions\n5. Ensure UI element placement is intuitive and doesn't interfere with gameplay\n6. Test visual consistency of all UI elements",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Implement Game Over and Restart",
      "description": "Create game over condition, screen, and restart functionality to complete the game cycle for the MVP",
      "status": "pending",
      "dependencies": [
        7
      ],
      "priority": "medium",
      "details": "1. Implement game over conditions and logic:\n   - When player loses all balls\n   - When blocks fill the screen/reach bottom boundary\n2. Create game over screen with final score display\n3. Implement score saving functionality using local storage\n4. Implement restart button functionality that fully resets the game state\n5. Implement win condition and screen when all blocks are destroyed\n6. Create smooth transitions between game states (play → game over/win → restart)",
      "testStrategy": "1. Verify game over triggers correctly when player loses all balls\n2. Verify game over triggers when blocks reach the bottom boundary\n3. Confirm game over screen displays properly with accurate final score\n4. Test that high scores are correctly saved to and retrieved from local storage\n5. Verify restart button properly resets all game elements and state\n6. Confirm win screen appears when all blocks are destroyed\n7. Test that state transitions (play → game over/win → restart) work smoothly",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Create PWA Configuration",
      "description": "Configure the game as a Progressive Web App for desktop browsers as part of Phase 1 MVP deployment",
      "status": "pending",
      "dependencies": [
        3,
        8
      ],
      "priority": "medium",
      "details": "1. Create manifest.json with app information including icons and color scheme\n2. Generate app icons in various sizes for different devices and contexts\n3. Implement service worker for offline gameplay capability\n4. Configure caching strategies for game assets to ensure fast loading\n5. Add install prompt for desktop browsers\n6. Optimize web performance for stable deployment\n7. Ensure PWA meets Lighthouse score of 90+ for PWA criteria",
      "testStrategy": "1. Test PWA installation on all major browsers (Chrome, Firefox, Safari, Edge)\n2. Verify game loads and plays correctly in offline mode\n3. Confirm service worker registration and cache mechanisms function properly\n4. Check that PWA icons and splash screens display correctly\n5. Verify install prompt appears appropriately\n6. Run Lighthouse audit to ensure PWA compliance and performance score\n7. Test the complete user journey from installation to offline gameplay",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Implement Multi-Ball Chain System",
      "description": "Extend the single ball system to support multiple balls fired in sequence as part of Phase 2 (Multi-Launch Mechanism) implementation",
      "status": "pending",
      "dependencies": [
        8
      ],
      "priority": "high",
      "details": "1. Modify ball launch system to support multiple balls fired sequentially with a single aim\n2. Implement sequential firing with configurable delay between balls\n3. Create ball pool for efficient object reuse and optimize multi-ball physics handling\n4. Add visual indicators for total ball count, remaining balls, and firing angle in UI\n5. Implement consistent timing control system for ball launch intervals\n6. Ensure all balls follow the same initial trajectory based on the single aiming action\n7. Optimize performance for handling multiple balls simultaneously on screen",
      "testStrategy": "1. Verify balls are fired sequentially with the configured intervals\n2. Confirm all balls follow the exact same initial trajectory based on aim\n3. Test performance with various ball counts to ensure no degradation\n4. Verify ball count and firing information are accurately displayed in UI\n5. Confirm each ball maintains proper individual physics interactions\n6. Test multi-ball firing with different ball counts and intervals\n7. Measure performance with large numbers of balls on screen simultaneously",
      "subtasks": [
        {
          "id": 1,
          "title": "구현: 다중 볼 발사 시스템 설계",
          "description": "단일 조준으로 다수의 볼을 순차적으로 발사하는 시스템 기본 구조 설계",
          "details": "1. 볼 발사 메커니즘을 단일 볼에서 다중 볼로 확장할 수 있는 구조 설계\\n2. 조준 각도 및 발사 명령을 모든 볼에 일관되게 적용하는 방식 구현\\n3. 볼 간 발사 간격과 타이밍 제어를 위한 로직 설계\\n4. 디버그 모드에서 발사 시스템을 테스트할 수 있는 기능 추가",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 10
        },
        {
          "id": 2,
          "title": "구현: 볼 풀링 시스템",
          "description": "다수의 볼을 효율적으로 관리하기 위한 객체 풀링 시스템 구현",
          "details": "1. Phaser에 최적화된 볼 객체 풀 생성\\n2. 볼 재사용 메커니즘 구현으로 메모리 사용 최적화\\n3. 풀링된 볼 객체의 속성 재설정 로직 구현\\n4. 동시에 표시되는 볼 수에 따른 성능 테스트 및 최적화",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 10
        },
        {
          "id": 3,
          "title": "구현: 순차적 타이밍 컨트롤",
          "description": "볼 발사 간격과 타이밍을 일정하게 제어하는 시스템 구현",
          "details": "1. 볼 발사 간격 타이머 구현\\n2. 발사 상태 관리 및 대기열 시스템 구현\\n3. 게임 일시정지/재개 시 타이밍 시스템 동기화\\n4. 여러 속도 설정에서의 일관된 타이밍 유지 테스트",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 10
        },
        {
          "id": 4,
          "title": "구현: 다중 볼 UI 표시",
          "description": "총 볼 개수, 남은 볼 개수, 발사 각도를 UI에 표시",
          "details": "1. HUD에 총 볼 개수 표시 요소 추가\\n2. 발사된/남은 볼 수 실시간 업데이트 UI 구현\\n3. 발사 각도 및 조준선 시각화 개선\\n4. 다중 볼 발사 진행 상태 표시기 구현",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 10
        },
        {
          "id": 5,
          "title": "구현: 궤적 일관성 확보",
          "description": "모든 볼이 동일한 초기 궤적으로 발사되도록 구현",
          "details": "1. 조준 각도 계산 및 저장 시스템 구현\\n2. 모든 볼에 동일한 초기 속도와 방향 적용\\n3. 물리 시스템에서 일관된 초기 궤적 유지 확인\\n4. 다양한 발사 각도에서의 일관성 테스트",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 10
        },
        {
          "id": 6,
          "title": "최적화: 다중 볼 성능 향상",
          "description": "대량의 볼이 화면에 존재할 때 성능 최적화",
          "details": "1. 볼 개체수에 따른 성능 측정 및 병목 지점 식별\\n2. 충돌 감지 최적화\\n3. 화면 밖 볼 객체의 효율적 관리\\n4. 디버그 모드에서 FPS 모니터링 및 최적화 효과 측정",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 10
        }
      ]
    },
    {
      "id": 11,
      "title": "Implement Fast-Forward Feature",
      "description": "Add fast-forward functionality to speed up gameplay with visual indicators",
      "details": "1. Separate game logic from animation rendering\n2. Implement speed multiplier system (1x, 2x, 4x)\n3. Create fast-forward button with visual state\n4. Add progress bar to show remaining balls/time\n5. Implement instant completion option\n6. Ensure physics calculations remain accurate at higher speeds\n7. Add visual effects to indicate fast-forward state",
      "testStrategy": "Test different speed settings for consistency in physics. Verify progress bar accurately reflects remaining time. Test instant completion functionality. Ensure game state remains consistent regardless of speed.",
      "priority": "medium",
      "dependencies": [
        10
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 12,
      "title": "Implement Pattern-Based Block Generation",
      "description": "Create a system for generating blocks in predefined patterns with increasing difficulty",
      "details": "1. Design pattern library data structure\n2. Create several basic block patterns\n3. Implement pattern selection and placement logic\n4. Add wave-based difficulty progression\n5. Implement HP scaling based on wave number\n6. Create pattern variations through rotation and mirroring\n7. Add random element to pattern selection",
      "testStrategy": "Test pattern generation for visual correctness. Verify HP scaling works correctly with wave progression. Test random pattern selection for good distribution. Ensure patterns fit correctly within game boundaries.",
      "priority": "high",
      "dependencies": [
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 13,
      "title": "Implement Ball Count Increase Mechanism",
      "description": "Create system to increase ball count based on blocks destroyed",
      "details": "1. Implement block destruction counter\n2. Define threshold for ball count increase\n3. Create visual feedback when threshold is reached\n4. Update ball count in HUD\n5. Implement persistent ball count between turns\n6. Add animation for ball count increase\n7. Balance threshold values for game progression",
      "testStrategy": "Test block counter increments correctly. Verify ball count increases at the correct threshold. Test persistence between turns. Ensure visual feedback is clear to the player.",
      "priority": "medium",
      "dependencies": [
        10,
        12
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 14,
      "title": "Implement Firebase Authentication",
      "description": "Integrate Firebase Authentication for user accounts and cloud save functionality",
      "details": "1. Setup Firebase project and configure web app\n2. Install Firebase SDK via npm\n3. Implement authentication UI (login/register)\n4. Create anonymous authentication for new users\n5. Add account linking options\n6. Implement auth state persistence\n7. Create user profile management",
      "testStrategy": "Test authentication flow with different methods. Verify anonymous accounts can be upgraded. Test auth persistence between sessions. Ensure error handling for auth failures.",
      "priority": "medium",
      "dependencies": [
        9
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 15,
      "title": "Implement Cloud Save with Firestore",
      "description": "Create cloud save functionality using Firestore to persist player progress",
      "details": "1. Design Firestore data structure for player saves\n2. Implement save/load functionality\n3. Create automatic save points during gameplay\n4. Add manual save option\n5. Implement conflict resolution for offline play\n6. Add data migration strategy for updates\n7. Implement save data encryption for sensitive information",
      "testStrategy": "Test save/load functionality with different account states. Verify offline play and synchronization. Test data migration with mock legacy data. Ensure performance impact of save operations is minimal.",
      "priority": "medium",
      "dependencies": [
        14
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "설계: Firestore 데이터 구조",
          "description": "클라우드 세이브를 위한 Firestore 데이터베이스 구조 설계",
          "details": "1. 사용자 프로필 및 게임 진행 상태를 저장할 데이터 모델 설계\\n2. 각 데이터 필드의 타입 및 제약 조건 정의\\n3. 인덱싱 전략 및 쿼리 효율성 계획\\n4. 데이터 접근 패턴 최적화",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 15
        },
        {
          "id": 2,
          "title": "구현: 저장/로드 기능",
          "description": "게임 데이터를 Firestore에 저장하고 불러오는 기능 구현",
          "details": "1. Firestore 연결 및 초기화 로직 구현\\n2. 게임 데이터 저장 함수 구현\\n3. 저장된 데이터 로드 함수 구현\\n4. 에러 처리 및 재시도 메커니즘 구현",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 15
        },
        {
          "id": 3,
          "title": "구현: 자동 저장 시스템",
          "description": "게임 진행 중 자동으로 데이터를 저장하는 시스템 구현",
          "details": "1. 자동 저장 트리거 포인트 정의 (웨이브 완료, 아이템 획득 등)\\n2. 저장 빈도 조절 및 최적화\\n3. 백그라운드 저장 프로세스 구현\\n4. 자동 저장 상태 표시기 구현",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 15
        },
        {
          "id": 4,
          "title": "구현: 오프라인 지원 및 동기화",
          "description": "오프라인 플레이 지원 및 온라인 연결 시 데이터 동기화 구현",
          "details": "1. 로컬 스토리지를 활용한 오프라인 데이터 저장\\n2. 온라인 연결 감지 시스템 구현\\n3. 온라인 복귀 시 데이터 동기화 로직\\n4. 충돌 해결 알고리즘 구현 (로컬 vs 클라우드 데이터)",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 15
        },
        {
          "id": 5,
          "title": "구현: 데이터 마이그레이션 전략",
          "description": "게임 업데이트 시 데이터 구조 변경을 처리하는 마이그레이션 시스템 구현",
          "details": "1. 데이터 스키마 버전 관리 시스템 설계\\n2. 버전 간 마이그레이션 함수 구현\\n3. 마이그레이션 오류 복구 전략 구현\\n4. 마이그레이션 테스트 및 검증 시스템",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 15
        },
        {
          "id": 6,
          "title": "구현: 보안 및 권한 관리",
          "description": "Firestore 보안 규칙 및 사용자 데이터 접근 제어 구현",
          "details": "1. Firestore 보안 규칙 설계 및 구현\\n2. 사용자별 데이터 접근 제한 구현\\n3. 데이터 유효성 검사 규칙 설정\\n4. 보안 규칙 테스트 및 검증",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 15
        }
      ]
    },
    {
      "id": 16,
      "title": "Implement Global Leaderboard",
      "description": "Create a global leaderboard system using Firebase to track high scores",
      "details": "1. Design leaderboard data structure in Firestore\n2. Implement score submission logic\n3. Create leaderboard UI with pagination\n4. Add filters for different time periods (daily, weekly, all-time)\n5. Implement friend leaderboards\n6. Add anti-cheat measures for score validation\n7. Create leaderboard refresh mechanism",
      "testStrategy": "Test score submission and retrieval. Verify leaderboard updates in real-time. Test pagination and filtering. Ensure leaderboard performance with large numbers of entries.",
      "priority": "low",
      "dependencies": [
        15
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 17,
      "title": "Implement Item System",
      "description": "Create the item system with collectible power-ups and inventory",
      "details": "1. Design item types and effects\n2. Create item spawn logic during gameplay\n3. Implement item collection via ball collision\n4. Create inventory UI on right side of screen\n5. Implement item activation mechanics\n6. Add visual effects for active items\n7. Balance item spawn rates and effects",
      "testStrategy": "Test item spawning and collection. Verify inventory updates correctly. Test item activation and effects. Ensure visual feedback is clear for item states.",
      "priority": "medium",
      "dependencies": [
        10,
        12
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "설계: 아이템 타입 및 효과 시스템",
          "description": "게임 내 다양한 아이템 유형과 효과를 설계하고 구현",
          "details": "1. 아이템 타입별 클래스 구조 설계 (파워업, 특수 효과 등)\\n2. 각 아이템 효과의 구현 방식 설계\\n3. 아이템 효과 지속 시간 및 중첩 규칙 정의\\n4. 아이템 효과 테스트 시스템 구축",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 17
        },
        {
          "id": 2,
          "title": "구현: 아이템 스폰 및 필드 배치",
          "description": "게임 필드에 아이템이 생성되고 배치되는 로직 구현",
          "details": "1. 블록 파괴 시 아이템 드롭 확률 시스템 구현\\n2. 아이템 스폰 위치 계산 로직\\n3. 아이템 이동 패턴 및 물리 설정\\n4. 아이템 스폰 밸런싱 및 테스트",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 17
        },
        {
          "id": 3,
          "title": "구현: 아이템 수집 메커니즘",
          "description": "볼이 아이템과 충돌하여 수집하는 메커니즘 구현",
          "details": "1. 볼-아이템 충돌 감지 구현\\n2. 아이템 수집 시 시각/청각적 피드백\\n3. 수집된 아이템을 인벤토리로 이동시키는 로직\\n4. 아이템 수집 이벤트 시스템 구현",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 17
        },
        {
          "id": 4,
          "title": "구현: 인벤토리 UI 시스템",
          "description": "수집된 아이템을 표시하고 관리하는 인벤토리 UI 구현",
          "details": "1. 우측 인벤토리 UI 레이아웃 설계 및 구현\\n2. 인벤토리 슬롯 시스템 구현\\n3. 아이템 아이콘 및 시각적 표현 구현\\n4. 아이템 선택 및 포커스 메커니즘 구현",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 17
        },
        {
          "id": 5,
          "title": "구현: 아이템 활성화 시스템",
          "description": "아이템 사용 및 효과 적용 메커니즘 구현",
          "details": "1. 아이템 클릭/터치로 활성화하는 입력 처리\\n2. 활성화된 아이템 효과 적용 로직\\n3. 효과 지속 시간 관리 시스템\\n4. 턴당 하나의 아이템만 사용 가능하도록 제한",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 17
        },
        {
          "id": 6,
          "title": "구현: 시각 효과 및 피드백",
          "description": "아이템 효과에 대한 시각적 및 청각적 피드백 구현",
          "details": "1. 아이템 효과별 파티클 및 시각 효과 구현\\n2. 효과 활성화/비활성화 애니메이션\\n3. 아이템 관련 사운드 효과 구현\\n4. 효과 지속 시간 표시기 구현",
          "status": "pending",
          "dependencies": [],
          "parentTaskId": 17
        }
      ]
    },
    {
      "id": 18,
      "title": "Implement Remote Config Integration",
      "description": "Integrate Firebase Remote Config for server-controlled game parameters",
      "details": "1. Setup Remote Config in Firebase console\n2. Define default values for configurable parameters\n3. Implement config fetching on game start\n4. Create fallback for offline mode\n5. Add config caching for performance\n6. Implement hot reloading of config changes\n7. Create admin panel for config management",
      "testStrategy": "Test config fetching and application. Verify fallback to defaults works correctly. Test config updates during gameplay. Ensure performance impact of config fetching is minimal.",
      "priority": "low",
      "dependencies": [
        15,
        17
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 19,
      "title": "Implement Ad Reward System",
      "description": "Integrate video ad rewards for gameplay benefits",
      "details": "1. Research and select ad provider compatible with web/mobile\n2. Implement ad SDK integration\n3. Create reward options (extra balls, items, continues)\n4. Implement ad viewing flow\n5. Add reward distribution after successful ad view\n6. Create fallback for ad failures\n7. Implement ad frequency capping",
      "testStrategy": "Test ad loading and display. Verify rewards are correctly distributed after ad viewing. Test error handling for ad failures. Ensure ad integration doesn't negatively impact game performance.",
      "priority": "low",
      "dependencies": [
        8,
        17
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 20,
      "title": "Prepare for Mobile Adaptation",
      "description": "Modify the game architecture to support future mobile deployment",
      "details": "1. Implement responsive design for different screen sizes\n2. Create touch input system alongside mouse controls\n3. Optimize asset loading for mobile bandwidth\n4. Implement device detection for platform-specific features\n5. Create mobile-friendly UI layouts\n6. Research Capacitor/Cordova requirements\n7. Document mobile adaptation plan for Phase 5",
      "testStrategy": "Test responsive design on different screen sizes. Verify touch controls work correctly in mobile browsers. Test performance on lower-end devices. Ensure UI is usable on smaller screens.",
      "priority": "low",
      "dependencies": [
        9,
        11,
        17
      ],
      "status": "pending",
      "subtasks": []
    }
  ]
}